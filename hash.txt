■ハッシュとは
  ・複数の値をまとめて管理する方法
  ・値にキーと呼ばれる名前をつけて管理する。
  ex)
    #配列
    [値1,値2]

    ＃ハッシュ(変数名に格納)
    変数名 = {キー1 => 値1, キー2 => 値2}

  ・上記のハッシュのキー1の値1だけ取り出したい場合
    ex)
      変数名 = {キー1 => 値1, キー2 => 値2}

      puts 変数名[キー1]

      結果：値1

  ・キー1の値1を違う値に更新したい場合
    ex)
    変数名 = {キー1 => 値1, キー2 => 値2}

    変数名[キー1] = 値3 ←違う値
    puts 変数名[キー1]
    結果：値3

  ・ハッシュに新しい要素を追加する場合
   ex)
   変数名 = {キー1 => 値1, キー2 => 値2}

   変数名[キー3] = 値3 ←新しい要素を追加
   puts 変数名

   結果:{キー1 => 値1, キー2 => 値2,キー3 => 値3}

■シンボルでのハッシュの書き方 ← プログラムは主にこれを使ってハッシュを書いている。
 ・いままでキーを文字列「"キー"」で書かないといけなかったがハッシュ以外の文字列とごっちゃになるので
  ：(シンボル)「：キー」とすることで扱うことができる。
  ex)
  変数名 = {:キー1 => 値1, :キー2 => 値2}

  puts 変数名[:キー1]

  結果：値1

    ※最終的にこのやり方が一般
            ↓
  ・キーがシンボルの場合「:キー1 =>」を「キー1:」と省略することが出来る。
  ex)
    変数名 = {キー1: 値1,キー2: 値2}

    puts 変数名[:キー1]
    結果：値1

■ハッシュを配列に入れることが出来る。ハッシュが多いと横に長くなるのでハッシュの要素ごとに
 改行する。ハッシュを配列に入れるとインデックス番号がハッシュ毎に割り振られる。
  ex)
     変数名 = [       インデックス番号
      {キー1: 値1}, ←      0
      {キー2: 値2}  ←      1
     ]

     puts 変数[インデックス番号]
 ・列[インデックス番号]でハッシュを用いることができるので、そのハッシュを代入した変数をつかって、
  変数[キー]とすることでハッシュの要素の値を用いることができます。
  ex)
    変数名 = [       インデックス番号
      {キー1: 値1}, ←      0
      {キー2: 値2}  ←      1
  ]
   puts 変数名[インデックス番号][インデックス番号を選択したハッシュの中のキー名]

   結果：値2
